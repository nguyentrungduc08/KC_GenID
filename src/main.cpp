// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <bits/stdc++.h>
#include "KC_GenID.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

//Kyoto Cabinet database
#include <kchashdb.h>
#include <thrift/TToString.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;
using namespace kyotocabinet;
using namespace  ::KC_GenID;

class KC_GenIDHandler : virtual public KC_GenIDIf {
private:
    HashDB db;
public:
    KC_GenIDHandler() {
        // Your initialization goes here
        // Your initialization goes here
        std::cout << "Server Starting........." <<std::endl;
        std::cout << std::endl;
        
        if (db.open("dbID.kch", HashDB::OWRITER | HashDB::OCREATE)) {
            std::cout << "open KC database success" << std::endl; 
        } else {
            std::cerr << "open error: " << db.error().name() << std::endl; 
        }
    }
    
    ~KC_GenIDHandler() {
        if (db.close()) {
            std::cout << "close KC database success" << std::endl;
        } else {
            std::cerr << "close error: " << db.error().name() << std::endl;
        }
    }

    void genId(Z_idGen& _return, const std::string& idType) {
        // Your implementation goes here
        int32_t isExistKey =  this->db.check(idType);
        if (isExistKey > -1){
            int64_t id = 1;
            std::string sId = std::to_string(id);
            this->db.set(idType,sId);
            KC_GenID::Z_idGen result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        } else {
            int64_t id;
            std::string sId;
            this->db.get(idType, &sId);
            id = std::stoi(sId);
            ++id;
            sId = std::to_string(id);
            this->db.set(idType,sId);
            KC_GenID::Z_idGen result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        }
        printf("genId\n");
    
    }

    void getRangeId(Z_rangeId& _return, const std::string& idType, const int64_t rangeId) {
        // Your implementation goes here
        int32_t isExistKey =  this->db.check(idType);
        if (isExistKey < 0){
            int64_t id = rangeId;
            std::string sId = std::to_string(id);
            this->db.set(idType,sId);
            KC_GenID::Z_rangeId result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        } else {
            int64_t id;
            std::string sId;
            this->db.get(idType, &sId);
            id = std::stoi(sId);
            id+=rangeId;
            sId = std::to_string(id);
            this->db.set(idType,sId);
            KC_GenID::Z_rangeId result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        }
        printf("getRangeId\n");
    }

    void getIdValue(Z_idValue& _return, const std::string& idType) {
        // Your implementation goes here
        int32_t isExistKey =  this->db.check(idType);
        if (isExistKey < 0){
            int64_t id  = 0;
            KC_GenID::Z_idValue result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        } else {
            int64_t id;
            std::string sId;
            this->db.get(idType, &sId);
            id = std::stoi(sId);
            KC_GenID::Z_idValue result;
            result.errorCode = 0;
            result.data = id;
            _return =  result;
        }
        printf("getIdValue\n");
    }

};

int main(int argc, char **argv) {
    int port = 6789;
    shared_ptr<KC_GenIDHandler> handler(new KC_GenIDHandler());
    shared_ptr<TProcessor> processor(new KC_GenIDProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

