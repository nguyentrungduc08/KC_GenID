/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kc_genid_TYPES_H
#define kc_genid_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace KC_GenID {

typedef struct _Z_idGen__isset {
  _Z_idGen__isset() : errorCode(false), data(false) {}
  bool errorCode;
  bool data;
} _Z_idGen__isset;

class Z_idGen {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  Z_idGen() : errorCode(0), data(0) {
  }

  virtual ~Z_idGen() throw() {}

  int32_t errorCode;
  int64_t data;

  _Z_idGen__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_data(const int64_t val) {
    data = val;
  }

  bool operator == (const Z_idGen & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Z_idGen &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_idGen & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_idGen &a, Z_idGen &b);

typedef struct _Z_rangeId__isset {
  _Z_rangeId__isset() : errorCode(false), data(false) {}
  bool errorCode;
  bool data;
} _Z_rangeId__isset;

class Z_rangeId {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  Z_rangeId() : errorCode(0), data(0) {
  }

  virtual ~Z_rangeId() throw() {}

  int32_t errorCode;
  int64_t data;

  _Z_rangeId__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_data(const int64_t val) {
    data = val;
  }

  bool operator == (const Z_rangeId & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Z_rangeId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_rangeId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_rangeId &a, Z_rangeId &b);

typedef struct _Z_idValue__isset {
  _Z_idValue__isset() : errorCode(false), data(false) {}
  bool errorCode;
  bool data;
} _Z_idValue__isset;

class Z_idValue {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  Z_idValue() : errorCode(0), data(0) {
  }

  virtual ~Z_idValue() throw() {}

  int32_t errorCode;
  int64_t data;

  _Z_idValue__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_data(const int64_t val) {
    data = val;
  }

  bool operator == (const Z_idValue & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Z_idValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Z_idValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Z_idValue &a, Z_idValue &b);

} // namespace

#endif
