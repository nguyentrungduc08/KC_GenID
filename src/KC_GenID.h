/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KC_GenID_H
#define KC_GenID_H

#include <thrift/TDispatchProcessor.h>
#include "kc_genid_types.h"

namespace KC_GenID {

class KC_GenIDIf {
 public:
  virtual ~KC_GenIDIf() {}
  virtual void genId(Z_idGen& _return, const std::string& idType) = 0;
  virtual void getRangeId(Z_rangeId& _return, const std::string& idType, const int64_t rangeId) = 0;
  virtual void getIdValue(Z_idValue& _return, const std::string& idType) = 0;
};

class KC_GenIDIfFactory {
 public:
  typedef KC_GenIDIf Handler;

  virtual ~KC_GenIDIfFactory() {}

  virtual KC_GenIDIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(KC_GenIDIf* /* handler */) = 0;
};

class KC_GenIDIfSingletonFactory : virtual public KC_GenIDIfFactory {
 public:
  KC_GenIDIfSingletonFactory(const boost::shared_ptr<KC_GenIDIf>& iface) : iface_(iface) {}
  virtual ~KC_GenIDIfSingletonFactory() {}

  virtual KC_GenIDIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(KC_GenIDIf* /* handler */) {}

 protected:
  boost::shared_ptr<KC_GenIDIf> iface_;
};

class KC_GenIDNull : virtual public KC_GenIDIf {
 public:
  virtual ~KC_GenIDNull() {}
  void genId(Z_idGen& /* _return */, const std::string& /* idType */) {
    return;
  }
  void getRangeId(Z_rangeId& /* _return */, const std::string& /* idType */, const int64_t /* rangeId */) {
    return;
  }
  void getIdValue(Z_idValue& /* _return */, const std::string& /* idType */) {
    return;
  }
};

typedef struct _KC_GenID_genId_args__isset {
  _KC_GenID_genId_args__isset() : idType(false) {}
  bool idType;
} _KC_GenID_genId_args__isset;

class KC_GenID_genId_args {
 public:

  KC_GenID_genId_args() : idType() {
  }

  virtual ~KC_GenID_genId_args() throw() {}

  std::string idType;

  _KC_GenID_genId_args__isset __isset;

  void __set_idType(const std::string& val) {
    idType = val;
  }

  bool operator == (const KC_GenID_genId_args & rhs) const
  {
    if (!(idType == rhs.idType))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_genId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_genId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KC_GenID_genId_pargs {
 public:


  virtual ~KC_GenID_genId_pargs() throw() {}

  const std::string* idType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_genId_result__isset {
  _KC_GenID_genId_result__isset() : success(false) {}
  bool success;
} _KC_GenID_genId_result__isset;

class KC_GenID_genId_result {
 public:

  KC_GenID_genId_result() {
  }

  virtual ~KC_GenID_genId_result() throw() {}

  Z_idGen success;

  _KC_GenID_genId_result__isset __isset;

  void __set_success(const Z_idGen& val) {
    success = val;
  }

  bool operator == (const KC_GenID_genId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_genId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_genId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_genId_presult__isset {
  _KC_GenID_genId_presult__isset() : success(false) {}
  bool success;
} _KC_GenID_genId_presult__isset;

class KC_GenID_genId_presult {
 public:


  virtual ~KC_GenID_genId_presult() throw() {}

  Z_idGen* success;

  _KC_GenID_genId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KC_GenID_getRangeId_args__isset {
  _KC_GenID_getRangeId_args__isset() : idType(false), rangeId(false) {}
  bool idType;
  bool rangeId;
} _KC_GenID_getRangeId_args__isset;

class KC_GenID_getRangeId_args {
 public:

  KC_GenID_getRangeId_args() : idType(), rangeId(0) {
  }

  virtual ~KC_GenID_getRangeId_args() throw() {}

  std::string idType;
  int64_t rangeId;

  _KC_GenID_getRangeId_args__isset __isset;

  void __set_idType(const std::string& val) {
    idType = val;
  }

  void __set_rangeId(const int64_t val) {
    rangeId = val;
  }

  bool operator == (const KC_GenID_getRangeId_args & rhs) const
  {
    if (!(idType == rhs.idType))
      return false;
    if (!(rangeId == rhs.rangeId))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_getRangeId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_getRangeId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KC_GenID_getRangeId_pargs {
 public:


  virtual ~KC_GenID_getRangeId_pargs() throw() {}

  const std::string* idType;
  const int64_t* rangeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_getRangeId_result__isset {
  _KC_GenID_getRangeId_result__isset() : success(false) {}
  bool success;
} _KC_GenID_getRangeId_result__isset;

class KC_GenID_getRangeId_result {
 public:

  KC_GenID_getRangeId_result() {
  }

  virtual ~KC_GenID_getRangeId_result() throw() {}

  Z_rangeId success;

  _KC_GenID_getRangeId_result__isset __isset;

  void __set_success(const Z_rangeId& val) {
    success = val;
  }

  bool operator == (const KC_GenID_getRangeId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_getRangeId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_getRangeId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_getRangeId_presult__isset {
  _KC_GenID_getRangeId_presult__isset() : success(false) {}
  bool success;
} _KC_GenID_getRangeId_presult__isset;

class KC_GenID_getRangeId_presult {
 public:


  virtual ~KC_GenID_getRangeId_presult() throw() {}

  Z_rangeId* success;

  _KC_GenID_getRangeId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KC_GenID_getIdValue_args__isset {
  _KC_GenID_getIdValue_args__isset() : idType(false) {}
  bool idType;
} _KC_GenID_getIdValue_args__isset;

class KC_GenID_getIdValue_args {
 public:

  KC_GenID_getIdValue_args() : idType() {
  }

  virtual ~KC_GenID_getIdValue_args() throw() {}

  std::string idType;

  _KC_GenID_getIdValue_args__isset __isset;

  void __set_idType(const std::string& val) {
    idType = val;
  }

  bool operator == (const KC_GenID_getIdValue_args & rhs) const
  {
    if (!(idType == rhs.idType))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_getIdValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_getIdValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KC_GenID_getIdValue_pargs {
 public:


  virtual ~KC_GenID_getIdValue_pargs() throw() {}

  const std::string* idType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_getIdValue_result__isset {
  _KC_GenID_getIdValue_result__isset() : success(false) {}
  bool success;
} _KC_GenID_getIdValue_result__isset;

class KC_GenID_getIdValue_result {
 public:

  KC_GenID_getIdValue_result() {
  }

  virtual ~KC_GenID_getIdValue_result() throw() {}

  Z_idValue success;

  _KC_GenID_getIdValue_result__isset __isset;

  void __set_success(const Z_idValue& val) {
    success = val;
  }

  bool operator == (const KC_GenID_getIdValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KC_GenID_getIdValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KC_GenID_getIdValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KC_GenID_getIdValue_presult__isset {
  _KC_GenID_getIdValue_presult__isset() : success(false) {}
  bool success;
} _KC_GenID_getIdValue_presult__isset;

class KC_GenID_getIdValue_presult {
 public:


  virtual ~KC_GenID_getIdValue_presult() throw() {}

  Z_idValue* success;

  _KC_GenID_getIdValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class KC_GenIDClient : virtual public KC_GenIDIf {
 public:
  KC_GenIDClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  KC_GenIDClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void genId(Z_idGen& _return, const std::string& idType);
  void send_genId(const std::string& idType);
  void recv_genId(Z_idGen& _return);
  void getRangeId(Z_rangeId& _return, const std::string& idType, const int64_t rangeId);
  void send_getRangeId(const std::string& idType, const int64_t rangeId);
  void recv_getRangeId(Z_rangeId& _return);
  void getIdValue(Z_idValue& _return, const std::string& idType);
  void send_getIdValue(const std::string& idType);
  void recv_getIdValue(Z_idValue& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KC_GenIDProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<KC_GenIDIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (KC_GenIDProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_genId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRangeId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIdValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KC_GenIDProcessor(boost::shared_ptr<KC_GenIDIf> iface) :
    iface_(iface) {
    processMap_["genId"] = &KC_GenIDProcessor::process_genId;
    processMap_["getRangeId"] = &KC_GenIDProcessor::process_getRangeId;
    processMap_["getIdValue"] = &KC_GenIDProcessor::process_getIdValue;
  }

  virtual ~KC_GenIDProcessor() {}
};

class KC_GenIDProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  KC_GenIDProcessorFactory(const ::boost::shared_ptr< KC_GenIDIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< KC_GenIDIfFactory > handlerFactory_;
};

class KC_GenIDMultiface : virtual public KC_GenIDIf {
 public:
  KC_GenIDMultiface(std::vector<boost::shared_ptr<KC_GenIDIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KC_GenIDMultiface() {}
 protected:
  std::vector<boost::shared_ptr<KC_GenIDIf> > ifaces_;
  KC_GenIDMultiface() {}
  void add(boost::shared_ptr<KC_GenIDIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void genId(Z_idGen& _return, const std::string& idType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->genId(_return, idType);
    }
    ifaces_[i]->genId(_return, idType);
    return;
  }

  void getRangeId(Z_rangeId& _return, const std::string& idType, const int64_t rangeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRangeId(_return, idType, rangeId);
    }
    ifaces_[i]->getRangeId(_return, idType, rangeId);
    return;
  }

  void getIdValue(Z_idValue& _return, const std::string& idType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIdValue(_return, idType);
    }
    ifaces_[i]->getIdValue(_return, idType);
    return;
  }

};

} // namespace

#endif
